// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique  // Add this for Clerk integration
  email     String   @unique
  firstName String? 
  lastName  String?
  avatar    String?
  plan      Plan     @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  accounts  SocialAccount[]
  posts     Post[]
  analytics Analytics[]
}

model SocialAccount {
  id           String   @id @default(cuid())
  platform     Platform
  username     String
  displayName  String?   
  profileImage String?  
  accessToken  String
  refreshToken String?
  tokenExpiry  DateTime? 
  isActive     Boolean  @default(true) 
  createdAt    DateTime @default(now()) 
  updatedAt    DateTime @updatedAt      
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  posts Post[]
  
  // prevents duplicate platform connections per user
  @@unique([userId, platform])
}

model Post {
  id          String     @id @default(cuid())
  content     String
  images      String[]   @default([])
  scheduledAt DateTime?
  publishedAt DateTime?
  status      PostStatus @default(DRAFT)
  platform    Platform
  //platformPostId String
  
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  accountId   String
  account     SocialAccount @relation(fields: [accountId], references: [id])
  
  analytics   Analytics[]
}

model Analytics {
  id          String @id @default(cuid())
  postId      String
  post        Post   @relation(fields: [postId], references: [id])

  userId      String
  user        User   @relation(fields: [userId], references: [id])

  impressions Int    @default(0)
  likes       Int    @default(0)
  shares      Int    @default(0)
  comments    Int    @default(0)
  clicks      Int    @default(0)
  reach      Int    @default(0)
  saves       Int    @default(0)

  engagementRate Float @default(0)
  ctr           Float @default(0)
  
  recordedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
}

model ScheduledJob {
  id          String    @id @default(cuid())
  postId      String
  jobId       String    @unique // Bull queue job ID
  status      JobStatus @default(PENDING)
  scheduledFor DateTime
  attempts    Int       @default(0)
  maxAttempts Int       @default(3)
  error       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("scheduled_jobs")
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum Platform {
  TWITTER
  INSTAGRAM
  LINKEDIN
  FACEBOOK
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}
